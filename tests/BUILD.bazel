load("@bazel_bats//:rules.bzl", "bats_test", "bats_test_suite")
load("@bazel_skylib//rules:common_settings.bzl", "string_flag")
load("@rules_shell//shell:sh_binary.bzl", "sh_binary")
load("@rules_shell//shell:sh_library.bzl", "sh_library")
load("@rules_shell//shell:sh_test.bzl", "sh_test")

sh_binary(
    name = "exit_with_input_bin",
    srcs = ["exit_with_input"],
)

sh_binary(
    name = "wrapper_script_for_exit_with_input_bin",
    srcs = ["wrapper_script_for_exit_with_input"],
    data = [
        ":exit_with_input_bin"
    ],
)

bats_test(
    name = "exit_with_input_test",
    srcs = ["exit_with_input.bats"],
    deps = [
        ":exit_with_input_bin",
    ],
)

bats_test(
    name = "wrapper_script_for_exit_with_input_test",
    srcs = ["wrapper_script_for_exit_with_input.bats"],
    deps = [
        ":wrapper_script_for_exit_with_input_bin",
    ],
)

bats_test(
    name = "exit_with_input_bats_assert_test",
    srcs = ["exit_with_input_bats_assert.bats"],
    deps = [
        ":exit_with_input_bin",
    ],
    uses_bats_assert = True,
)

sh_library(
    name = "helper",
    srcs = ["helper.bash"],
)

bats_test(
    name = "expected_failure",
    srcs = ["expected_failure.bats"],
    tags = ["manual"],
)

sh_test(
    name = "expected_failure_test",
    srcs = ["run_expected_failures.sh"],
    data = [":expected_failure"],
)

bats_test(
    name = "hello_world_load_test",
    srcs = ["hello_world_load.bats"],
    deps = [":helper"],
)

bats_test(
    name = "hello_world_data_test",
    srcs = ["hello_world_data.bats"],
    data = ["testdata/golden_4.txt"],
)

bats_test(
    name = "hello_world_test",
    srcs = ["hello_world.bats"],
    env = {
        "SIMPLE_VAL": "hello_world",
        "ESCAPED_SIMPLE_VAL": "$$SIMPLE_VAL",
        "DOUBLE_DOLLAR_SIGN_ESCAPED_SIMPLE_VAL": "$$$$SIMPLE_VAL",
        "LOCATION_VAL": "$(location :dummy)",
        "EXECPATH_VAL": "$(execpath :dummy)",
        "ROOTPATH_VAL": "$(rootpath :dummy)",
        "RLOCATIONPATH_VAL": "$(rlocationpath :dummy)",
        "STRING_FLAG_TO_OTHER_ENV_VAR": "$(STRING_FLAG_TO_OTHER_ENV_VAR)",
        "STRING_FLAG_TO_STRING_FLAG_ENV_VAR": "$(STRING_FLAG_TO_STRING_FLAG_ENV_VAR)",
        "TOOLCHAIN_STRING_FLAG_ENV_VAR_RAW": "$STRING_FLAG_ENV_VAR",
        "TOOLCHAIN_STRING_FLAG_ENV_VAR_PAREN": "$(STRING_FLAG_ENV_VAR)",
        "TOOLCHAIN_STRING_FLAG_ENV_VAR_CURLY": "${STRING_FLAG_ENV_VAR}",
        "STRING_FLAG_TO_LOCATION_ENV_VAR_RAW": "$STRING_FLAG_TO_LOCATION_ENV_VAR",
        "STRING_FLAG_TO_LOCATION_ENV_VAR_PAREN": "$(STRING_FLAG_TO_LOCATION_ENV_VAR)",
        "STRING_FLAG_TO_LOCATION_ENV_VAR_CURLY": "${STRING_FLAG_TO_LOCATION_ENV_VAR}",
        "INDIRECT_SIMPLE_VAL_RAW": "$SIMPLE_VAL",
        "INDIRECT_SIMPLE_VAL_PAREN": "$(SIMPLE_VAL)",
        "INDIRECT_SIMPLE_VAL_CURLY": "${SIMPLE_VAL}",
        "INDIRECT_ESCAPED_SIMPLE_VAL_RAW": "$ESCAPED_SIMPLE_VAL",
        "INDIRECT_ESCAPED_SIMPLE_VAL_PAREN": "$(ESCAPED_SIMPLE_VAL)",
        "INDIRECT_ESCAPED_SIMPLE_VAL_CURLY": "${ESCAPED_SIMPLE_VAL}",
        "INDIRECT_LOCATION_VAL_RAW": "$LOCATION_VAL",
        "INDIRECT_LOCATION_VAL_PAREN": "$(LOCATION_VAL)",
        "INDIRECT_LOCATION_VAL_CURLY": "${LOCATION_VAL}",
        "INDIRECT_EXECPATH_VAL_RAW": "$EXECPATH_VAL",
        "INDIRECT_EXECPATH_VAL_PAREN": "$(EXECPATH_VAL)",
        "INDIRECT_EXECPATH_VAL_CURLY": "${EXECPATH_VAL}",
        "INDIRECT_ROOTPATH_VAL_RAW": "$ROOTPATH_VAL",
        "INDIRECT_ROOTPATH_VAL_PAREN": "$(ROOTPATH_VAL)",
        "INDIRECT_ROOTPATH_VAL_CURLY": "${ROOTPATH_VAL}",
        "INDIRECT_RLOCATIONPATH_VAL_RAW": "$RLOCATIONPATH_VAL",
        "INDIRECT_RLOCATIONPATH_VAL_PAREN": "$(RLOCATIONPATH_VAL)",
        "INDIRECT_RLOCATIONPATH_VAL_CURLY": "${RLOCATIONPATH_VAL}",
        "INDIRECT_TOOLCHAIN_STRING_FLAG_ENV_VAR_RAW": "$TOOLCHAIN_STRING_FLAG_ENV_VAR_RAW",
        "INDIRECT_TOOLCHAIN_STRING_FLAG_ENV_VAR_PAREN": "$(TOOLCHAIN_STRING_FLAG_ENV_VAR_RAW)",
        "INDIRECT_TOOLCHAIN_STRING_FLAG_ENV_VAR_CURLY": "${TOOLCHAIN_STRING_FLAG_ENV_VAR_RAW}",
        "INDIRECT_STRING_FLAG_TO_LOCATION_ENV_VAR_RAW": "$STRING_FLAG_TO_LOCATION_ENV_VAR_RAW",
        "INDIRECT_STRING_FLAG_TO_LOCATION_ENV_VAR_PAREN": "$(STRING_FLAG_TO_LOCATION_ENV_VAR_RAW)",
        "INDIRECT_STRING_FLAG_TO_LOCATION_ENV_VAR_CURLY": "${STRING_FLAG_TO_LOCATION_ENV_VAR_RAW}",
        "MULTI_INDIRECT_RAW": "$INDIRECT_SIMPLE_VAL_RAW-$INDIRECT_ESCAPED_SIMPLE_VAL_RAW-$INDIRECT_LOCATION_VAL_RAW-$INDIRECT_RLOCATIONPATH_VAL_RAW-$INDIRECT_TOOLCHAIN_STRING_FLAG_ENV_VAR_RAW-$INDIRECT_STRING_FLAG_TO_LOCATION_ENV_VAR_RAW",
        "MULTI_INDIRECT_PAREN": "$(INDIRECT_SIMPLE_VAL_RAW)-$(INDIRECT_ESCAPED_SIMPLE_VAL_RAW)-$(INDIRECT_LOCATION_VAL_RAW)-$(INDIRECT_RLOCATIONPATH_VAL_RAW)-$(INDIRECT_TOOLCHAIN_STRING_FLAG_ENV_VAR_RAW)-$(INDIRECT_STRING_FLAG_TO_LOCATION_ENV_VAR_RAW)",
        "MULTI_INDIRECT_CURLY": "${INDIRECT_SIMPLE_VAL_RAW}-${INDIRECT_ESCAPED_SIMPLE_VAL_RAW}-${INDIRECT_LOCATION_VAL_RAW}-${INDIRECT_RLOCATIONPATH_VAL_RAW}-${INDIRECT_TOOLCHAIN_STRING_FLAG_ENV_VAR_RAW}-${INDIRECT_STRING_FLAG_TO_LOCATION_ENV_VAR_RAW}",
    },
    deps = [":dummy"],
    toolchains = [
        ":env_var_flag",
        ":dummy_location_flag",
        ":hello_world_flag",
        ":string_flag_env_var_flag",
    ],
)

bats_test(
    name = "hello_world_twofiles_test",
    srcs = [
        "hello_world_1.bats",
        "hello_world_2.bats",
    ],
)

bats_test(
    name = "hello_world_twofiles_1_test",
    srcs = [
        "hello_world_1.bats",
    ],
)

bats_test(
    name = "hello_world_twofiles_2_test",
    srcs = [
        "hello_world_2.bats",
    ],
)

filegroup(
    name = "dummy",
    srcs = ["dummy.txt"],
)

bats_test_suite(
    name = "test_suite",
    srcs = [
        "hello_world_1.bats",
        "hello_world_2.bats",
    ]
)

string_flag(
    name = "env_var_flag",
    build_setting_default = "$(LOCATION_VAL)",
    make_variable = "STRING_FLAG_TO_OTHER_ENV_VAR",
)

string_flag(
    name = "dummy_location_flag",
    build_setting_default = "$(location :dummy)",
    make_variable = "STRING_FLAG_TO_LOCATION_ENV_VAR",
)

string_flag(
    name = "hello_world_flag",
    build_setting_default = "flag_value",
    make_variable = "STRING_FLAG_ENV_VAR",
)

string_flag(
    name = "string_flag_env_var_flag",
    build_setting_default = "$(STRING_FLAG_TO_LOCATION_ENV_VAR)",
    make_variable = "STRING_FLAG_TO_STRING_FLAG_ENV_VAR",
)
